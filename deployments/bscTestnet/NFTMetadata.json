{
  "address": "0x9BCeafF5b06ed6fB40af419aa6E7F74E9e278998",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "attack",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defense",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "health",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "critChance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "critDmg",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "recover",
              "type": "uint256"
            }
          ],
          "internalType": "struct INFT.TokenInfo",
          "name": "token",
          "type": "tuple"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xedd0f3ce96320c12b3b070c0be54ba7a12939cb9bbc7c50afbbf4e904ce94575",
  "receipt": {
    "to": null,
    "from": "0x62F650c0eE84E3a1998A2EEe042a12D9E9728843",
    "contractAddress": "0x9BCeafF5b06ed6fB40af419aa6E7F74E9e278998",
    "transactionIndex": 16,
    "gasUsed": "6672079",
    "logsBloom": "0x
    "blockHash": "0x79fd88a7cda4650ca3b0684801a2508d4b9f515b1c26c0f7698abf0b9c0f7a50",
    "transactionHash": "0xedd0f3ce96320c12b3b070c0be54ba7a12939cb9bbc7c50afbbf4e904ce94575",
    "logs": [],
    "blockNumber": 23890566,
    "cumulativeGasUsed": "7365750",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7553482301c0ed88af43d19a4d65ae1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defense\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"critChance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"critDmg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recover\",\"type\":\"uint256\"}],\"internalType\":\"struct INFT.TokenInfo\",\"name\":\"token\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nftMetadata.sol\":\"NFTMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5efa2a2ed44af15fd5bec8c43b45cb26fe6cb68671fea151e6afcfed66ed2672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/interfaces/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface INFT {\\r\\n    struct TokenInfo {\\r\\n        string image;\\r\\n        address[] tokens;\\r\\n        uint256 rate;\\r\\n        uint256 attack;\\r\\n        uint256 defense;\\r\\n        uint256 health;\\r\\n        uint256 critChance;\\r\\n        uint256 critDmg;\\r\\n        uint256 recover;\\r\\n    }\\r\\n\\r\\n    function raiseRewardPool(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x74793159bf342c5c67f9127c599ed3478d479d8e07bae1db10f1a568a9a6fb34\",\"license\":\"Unlicensed\"},\"contracts/nftMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\nimport \\\"./interfaces/INFT.sol\\\";\\r\\n\\r\\ncontract NFTMetadata {\\r\\n    address[4] public rewardTokens = [\\r\\n        0x0000000000000000000000000000000000000000,\\r\\n        0x0000000000000000000000000000000000000001,\\r\\n        0x0000000000000000000000000000000000000002,\\r\\n        0x0000000000000000000000000000000000000003\\r\\n    ];\\r\\n\\r\\n    string[] shiba = [\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Shiba-01.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Shiba-02.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Shiba-03.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Shiba-04.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Shiba-05.png\\\"\\r\\n    ];\\r\\n    string[] floki = [\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Floki-01.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Floki-02.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Floki-03.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Floki-04.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Floki-05.png\\\"\\r\\n    ];\\r\\n    string[] dogy = [\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Dogy-01.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Dogy-02.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Dogy-03.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Dogy-04.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Dogy-05.png\\\"\\r\\n    ];\\r\\n    string[] doge = [\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Doge-01.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Doge-02.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Doge-03.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Doge-04.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Doge-05.png\\\"\\r\\n    ];\\r\\n\\r\\n    string[] megaMin = [\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-01.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-02.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-03.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-01.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-02.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-03.png\\\"\\r\\n    ];\\r\\n    string[] megaMid = [\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-04.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-05.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-06.png\\\",\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-07.png\\\"\\r\\n    ];\\r\\n    string megaMax =\\r\\n        \\\"ipfs://QmbF534aUPpQAuQL5C7pS53TqppZFHJ22WQRZBdypb2gqd/Mega%20NFT-10.png\\\";\\r\\n\\r\\n    mapping(address => mapping(uint256 => string)) simpleImage;\\r\\n    mapping(address => mapping(address => string)) minImage;\\r\\n    mapping(address => mapping(address => mapping(address => string))) midImage;\\r\\n\\r\\n    constructor() {\\r\\n        _fillImageMappings();\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId, INFT.TokenInfo calldata token)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\": \\\"Babies of Mars #',\\r\\n                                Strings.toString(tokenId),\\r\\n                                '\\\", \\\"description\\\": \\\"adasdasdasd\\\", \\\"image\\\": \\\"',\\r\\n                                _getImage(token),\\r\\n                                '\\\",{ \\\"attributes\\\": [ {\\\"trait_type\\\": \\\"tokens\\\", \\\"value\\\": ',\\r\\n                                addressArrayToString(token.tokens),\\r\\n                                '}, { \\\"trait_type\\\": \\\"attack\\\", \\\"value\\\": ',\\r\\n                                compileStatString(token)\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _getImage(INFT.TokenInfo calldata token)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (token.tokens.length == 1) {\\r\\n            return simpleImage[token.tokens[0]][token.rate];\\r\\n        } else if (token.tokens.length < 4) {\\r\\n            return _getImageIpfs(token.tokens);\\r\\n        } else {\\r\\n            return megaMax;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getImageIpfs(address[] memory tokens)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint256[] memory indexes = new uint256[](3);\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            for (uint256 ind = 0; ind < 4; ind++) {\\r\\n                if (tokens[i] == rewardTokens[ind]) {\\r\\n                    indexes[i] = ind;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        uint256[] memory sorted = quickSort(indexes, 0, 2);\\r\\n        if (sorted.length == 3) {\\r\\n            return\\r\\n                midImage[tokens[sorted[0]]][tokens[sorted[1]]][\\r\\n                    tokens[sorted[2]]\\r\\n                ];\\r\\n        } else {\\r\\n            return minImage[tokens[sorted[0]]][tokens[sorted[1]]];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function quickSort(\\r\\n        uint256[] memory arr,\\r\\n        uint256 left,\\r\\n        uint256 right\\r\\n    ) internal pure returns (uint256[] memory) {\\r\\n        if (left >= right) return arr;\\r\\n        uint256 p = arr[(left + right) / 2];\\r\\n        uint256 i = left;\\r\\n        uint256 j = right;\\r\\n        while (i < j) {\\r\\n            while (arr[i] < p) ++i;\\r\\n            while (arr[j] > p) --j;\\r\\n            if (arr[i] > arr[j]) (arr[i], arr[j]) = (arr[j], arr[i]);\\r\\n            else ++i;\\r\\n        }\\r\\n\\r\\n        if (j > left) return quickSort(arr, left, j - 1);\\r\\n        return quickSort(arr, j + 1, right);\\r\\n    }\\r\\n\\r\\n    function compileStatString(INFT.TokenInfo calldata token)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '}, { \\\"trait_type\\\": \\\"attack\\\", \\\"value\\\": ',\\r\\n                    Strings.toString(token.attack),\\r\\n                    '}, { \\\"trait_type\\\": \\\"defense\\\", \\\"value\\\": ',\\r\\n                    Strings.toString(token.defense),\\r\\n                    '}, { \\\"trait_type\\\": \\\"health\\\", \\\"value\\\": ',\\r\\n                    Strings.toString(token.health),\\r\\n                    '}, { \\\"trait_type\\\": \\\"critical rate\\\", \\\"value\\\": ',\\r\\n                    Strings.toString(token.critChance),\\r\\n                    '}, { \\\"trait_type\\\": \\\"critical damage\\\", \\\"value\\\": ',\\r\\n                    Strings.toString(token.critDmg),\\r\\n                    '}, { \\\"trait_type\\\": \\\"rating\\\", \\\"value\\\": ',\\r\\n                    Strings.toString(token.rate),\\r\\n                    '}, { \\\"trait_type\\\": \\\"recovery\\\", \\\"value\\\": ',\\r\\n                    Strings.toString(token.recover),\\r\\n                    \\\"} ] }\\\"\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function addressArrayToString(address[] memory addressArray)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory result = \\\"[\\\";\\r\\n        for (uint256 i = 0; i < addressArray.length; i++) {\\r\\n            if (i == addressArray.length - 1) {\\r\\n                result = string.concat(\\r\\n                    result,\\r\\n                    \\\"'0x\\\",\\r\\n                    toAsciiString(addressArray[i]),\\r\\n                    \\\"'\\\"\\r\\n                );\\r\\n            } else {\\r\\n                result = string.concat(\\r\\n                    result,\\r\\n                    \\\"'0x\\\",\\r\\n                    toAsciiString(addressArray[i]),\\r\\n                    \\\"',\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        result = string.concat(result, \\\"]\\\");\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function toAsciiString(address x) internal pure returns (string memory) {\\r\\n        bytes memory s = new bytes(40);\\r\\n        for (uint256 i = 0; i < 20; i++) {\\r\\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\r\\n            bytes1 hi = bytes1(uint8(b) / 16);\\r\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\r\\n            s[2 * i] = char(hi);\\r\\n            s[2 * i + 1] = char(lo);\\r\\n        }\\r\\n        return string(s);\\r\\n    }\\r\\n\\r\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\r\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\r\\n        else return bytes1(uint8(b) + 0x57);\\r\\n    }\\r\\n\\r\\n    function _fillImageMappings() internal {\\r\\n        uint256 rate = 1000;\\r\\n        for (uint256 i = 0; i < 5; i++) {\\r\\n            simpleImage[rewardTokens[0]][rate] = shiba[0];\\r\\n            simpleImage[rewardTokens[1]][rate] = floki[0];\\r\\n            simpleImage[rewardTokens[2]][rate] = dogy[0];\\r\\n            simpleImage[rewardTokens[3]][rate] = doge[0];\\r\\n            rate += 250;\\r\\n        }\\r\\n        minImage[rewardTokens[0]][rewardTokens[1]] = megaMin[0];\\r\\n        minImage[rewardTokens[0]][rewardTokens[2]] = megaMin[1];\\r\\n        minImage[rewardTokens[0]][rewardTokens[3]] = megaMin[2];\\r\\n        minImage[rewardTokens[1]][rewardTokens[2]] = megaMin[3];\\r\\n        minImage[rewardTokens[1]][rewardTokens[3]] = megaMin[4];\\r\\n        minImage[rewardTokens[2]][rewardTokens[3]] = megaMin[5];\\r\\n        midImage[rewardTokens[0]][rewardTokens[1]][rewardTokens[2]] = megaMid[\\r\\n            0\\r\\n        ];\\r\\n        midImage[rewardTokens[0]][rewardTokens[1]][rewardTokens[3]] = megaMid[\\r\\n            1\\r\\n        ];\\r\\n        midImage[rewardTokens[0]][rewardTokens[2]][rewardTokens[3]] = megaMid[\\r\\n            2\\r\\n        ];\\r\\n        midImage[rewardTokens[1]][rewardTokens[2]][rewardTokens[3]] = megaMid[\\r\\n            3\\r\\n        ];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1b6c0a97f7f2f64c765c414440c5df14204d832fad7e6def06a719559bd45ba6\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80637bb7bed11461003b578063977318941461006b575b600080fd5b61004e610049366004610ce7565b61008b565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e610079366004610d00565b6100ab565b6040516100629190610d7f565b6000816004811061009b57600080fd5b01546001600160a01b0316905081565b60606101396100b984610161565b6100c28461026a565b6101096100d26020870187610db2565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506103e992505050565b610112866104e2565b6040516020016101259493929190610e57565b60405160208183030381529060405261056c565b6040516020016101499190610f69565b60405160208183030381529060405290505b92915050565b6060816000036101885750506040805180820190915260018152600360fc1b602082015290565b8160005b81156101b2578061019c81610fc4565b91506101ab9050600a83610ff3565b915061018c565b60008167ffffffffffffffff8111156101cd576101cd611007565b6040519080825280601f01601f1916602001820160405280156101f7576020820181803683370190505b5090505b84156102625761020c60018361101d565b9150610219600a86611034565b610224906030611048565b60f81b81838151811061023957610239611060565b60200101906001600160f81b031916908160001a90535061025b600a86610ff3565b94506101fb565b949350505050565b60606102796020830183610db2565b905060010361037e57600b60006102936020850185610db2565b60008181106102a4576102a4611060565b90506020020160208101906102b99190611076565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008360400135815260200190815260200160002080546102f99061109f565b80601f01602080910402602001604051908101604052809291908181526020018280546103259061109f565b80156103725780601f1061034757610100808354040283529160200191610372565b820191906000526020600020905b81548152906001019060200180831161035557829003601f168201915b50505050509050919050565b600461038d6020840184610db2565b905010156103dc5761015b6103a56020840184610db2565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506106bf92505050565b600a80546102f99061109f565b6040805180820190915260018152605b60f81b602082015260609060005b83518110156104b9576001845161041e919061101d565b810361046e578161044785838151811061043a5761043a611060565b60200260200101516109b0565b6040516020016104589291906110d9565b60405160208183030381529060405291506104a7565b8161048485838151811061043a5761043a611060565b604051602001610495929190611125565b60405160208183030381529060405291505b806104b181610fc4565b915050610407565b50806040516020016104cb9190611172565b60408051601f198184030181529190529392505050565b60606104f18260600135610161565b6104fe8360800135610161565b61050b8460a00135610161565b6105188560c00135610161565b6105258660e00135610161565b6105328760400135610161565b610540886101000135610161565b6040516020016105569796959493929190611197565b6040516020818303038152906040529050919050565b6060815160000361058b57505060408051602081019091526000815290565b600060405180606001604052806040815260200161154460409139905060006003845160026105ba9190611048565b6105c49190610ff3565b6105cf906004611392565b67ffffffffffffffff8111156105e7576105e7611007565b6040519080825280601f01601f191660200182016040528015610611576020820181803683370190505b509050600182016020820185865187015b8082101561067d576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250610622565b505060038651066001811461069957600281146106ac576106b4565b603d6001830353603d60028303536106b4565b603d60018303535b509195945050505050565b604080516003808252608082019092526060916000919060208201848036833701905050905060005b83518110156107915760005b600481101561077e576000816004811061071057610710611060565b015485516001600160a01b039091169086908490811061073257610732611060565b60200260200101516001600160a01b03160361076c578083838151811061075b5761075b611060565b60200260200101818152505061077e565b8061077681610fc4565b9150506106f4565b508061078981610fc4565b9150506106e8565b5060006107a18260006002610af7565b9050805160030361094257600d600085836000815181106107c4576107c4611060565b6020026020010151815181106107dc576107dc611060565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000858360018151811061081a5761081a611060565b60200260200101518151811061083257610832611060565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000858360028151811061087057610870611060565b60200260200101518151811061088857610888611060565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002080546108bb9061109f565b80601f01602080910402602001604051908101604052809291908181526020018280546108e79061109f565b80156109345780601f1061090957610100808354040283529160200191610934565b820191906000526020600020905b81548152906001019060200180831161091757829003601f168201915b505050505092505050919050565b600c6000858360008151811061095a5761095a611060565b60200260200101518151811061097257610972611060565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000858360018151811061087057610870611060565b60408051602880825260608281019093526000919060208201818036833701905050905060005b6014811015610af05760006109ed82601361101d565b6109f8906008611392565b610a03906002611495565b610a16906001600160a01b038716610ff3565b60f81b9050600060108260f81c610a2d91906114a1565b60f81b905060008160f81c6010610a4491906114c3565b8360f81c610a5291906114e4565b60f81b9050610a6082610cb1565b85610a6c866002611392565b81518110610a7c57610a7c611060565b60200101906001600160f81b031916908160001a905350610a9c81610cb1565b85610aa8866002611392565b610ab3906001611048565b81518110610ac357610ac3611060565b60200101906001600160f81b031916908160001a9053505050508080610ae890610fc4565b9150506109d7565b5092915050565b6060818310610b07575082610caa565b6000846002610b168587611048565b610b209190610ff3565b81518110610b3057610b30611060565b6020908102919091010151905083835b80821015610c68575b82878381518110610b5c57610b5c611060565b60200260200101511015610b7a57610b7382610fc4565b9150610b49565b82878281518110610b8d57610b8d611060565b60200260200101511115610bab57610ba481611507565b9050610b7a565b868181518110610bbd57610bbd611060565b6020026020010151878381518110610bd757610bd7611060565b60200260200101511115610c5857868181518110610bf757610bf7611060565b6020026020010151878381518110610c1157610c11611060565b6020026020010151888481518110610c2b57610c2b611060565b60200260200101898481518110610c4457610c44611060565b602090810291909101019190915252610b40565b610c6182610fc4565b9150610b40565b85811115610c8f57610c858787610c8060018561101d565b610af7565b9350505050610caa565b610ca487610c9e836001611048565b87610af7565b93505050505b9392505050565b6000600a60f883901c1015610cd857610ccf60f883901c603061151e565b60f81b92915050565b610ccf60f883901c605761151e565b600060208284031215610cf957600080fd5b5035919050565b60008060408385031215610d1357600080fd5b82359150602083013567ffffffffffffffff811115610d3157600080fd5b83016101208186031215610d4457600080fd5b809150509250929050565b60005b83811015610d6a578181015183820152602001610d52565b83811115610d79576000848401525b50505050565b6020815260008251806020840152610d9e816040850160208701610d4f565b601f01601f19169190910160400192915050565b6000808335601e19843603018112610dc957600080fd5b83018035915067ffffffffffffffff821115610de457600080fd5b6020019150600581901b3603821315610dfc57600080fd5b9250929050565b60008151610e15818560208601610d4f565b9290920192915050565b7f7d2c207b202274726169745f74797065223a202261747461636b222c202276618152650363ab2911d160d51b602082015260260190565b7f7b226e616d65223a2022426162696573206f66204d6172732023000000000000815260008551610e8f81601a850160208a01610d4f565b7f222c20226465736372697074696f6e223a20226164617364617364617364222c601a918401918201526a101134b6b0b3b2911d101160a91b603a8201528551610ee0816045840160208a01610d4f565b7f222c7b202261747472696275746573223a205b207b2274726169745f7479706560459290910191820152750111d10113a37b5b2b739911610113b30b63ab2911d160551b60658201528451610f3d81607b840160208901610d4f565b610f4b607b82840101610e1f565b9150508351610f5e818360208801610d4f565b019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610fa181601d850160208701610d4f565b91909101601d0192915050565b634e487b7160e01b600052601160045260246000fd5b600060018201610fd657610fd6610fae565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261100257611002610fdd565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561102f5761102f610fae565b500390565b60008261104357611043610fdd565b500690565b6000821982111561105b5761105b610fae565b500190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561108857600080fd5b81356001600160a01b0381168114610caa57600080fd5b600181811c908216806110b357607f821691505b6020821081036110d357634e487b7160e01b600052602260045260246000fd5b50919050565b600083516110eb818460208801610d4f565b6204e60f60eb1b908301908152835161110b816003840160208801610d4f565b602760f81b60039290910191820152600401949350505050565b60008351611137818460208801610d4f565b6204e60f60eb1b9083019081528351611157816003840160208801610d4f565b6109cb60f21b60039290910191820152600501949350505050565b60008251611184818460208701610d4f565b605d60f81b920191825250600101919050565b60006111a282610e1f565b89516111b2818360208e01610d4f565b8082019150507f7d2c207b202274726169745f74797065223a2022646566656e7365222c202276815266030b63ab2911d160cd1b602082015288516111fe816027840160208d01610d4f565b7f7d2c207b202274726169745f74797065223a20226865616c7468222c2022766160279290910191820152650363ab2911d160d51b6047820152875161124b81604d840160208c01610d4f565b7f7d2c207b202274726169745f74797065223a2022637269746963616c20726174604d92909101918201526c032911610113b30b63ab2911d1609d1b606d82015261138461137361136d61133361132d6112f56112ef6112ae607a89018f610e03565b7f7d2c207b202274726169745f74797065223a2022637269746963616c2064616d81526e030b3b2911610113b30b63ab2911d1608d1b6020820152602f0190565b8c610e03565b7f7d2c207b202274726169745f74797065223a2022726174696e67222c202276618152650363ab2911d160d51b602082015260260190565b89610e03565b7f7d2c207b202274726169745f74797065223a20227265636f76657279222c202281526703b30b63ab2911d160c51b602082015260280190565b86610e03565b647d205d207d60d81b815260050190565b9a9950505050505050505050565b60008160001904831182151516156113ac576113ac610fae565b500290565b600181815b808511156113ec5781600019048211156113d2576113d2610fae565b808516156113df57918102915b93841c93908002906113b6565b509250929050565b6000826114035750600161015b565b816114105750600061015b565b816001811461142657600281146114305761144c565b600191505061015b565b60ff84111561144157611441610fae565b50506001821b61015b565b5060208310610133831016604e8410600b841016171561146f575081810a61015b565b61147983836113b1565b806000190482111561148d5761148d610fae565b029392505050565b6000610caa83836113f4565b600060ff8316806114b4576114b4610fdd565b8060ff84160491505092915050565b600060ff821660ff84168160ff048111821515161561148d5761148d610fae565b600060ff821660ff8416808210156114fe576114fe610fae565b90039392505050565b60008161151657611516610fae565b506000190190565b600060ff821660ff84168060ff0382111561153b5761153b610fae565b01939250505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220d50b6820ad213f45f771fc95b47eab67ec0fd2997fb181280914212078b13dc864736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2805,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)4_storage"
      },
      {
        "astId": 2814,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "shiba",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2823,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "floki",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2832,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "dogy",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2841,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "doge",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2851,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "megaMin",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2859,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "megaMid",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2862,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "megaMax",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 2868,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "simpleImage",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_string_storage))"
      },
      {
        "astId": 2874,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "minImage",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_string_storage))"
      },
      {
        "astId": 2882,
        "contract": "contracts/nftMetadata.sol:NFTMetadata",
        "label": "midImage",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_string_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)4_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_string_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => string)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_string_storage))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_string_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_string_storage)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}